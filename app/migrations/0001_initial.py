# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2017-01-17 13:12
from __future__ import unicode_literals

import app.models
import app.validators
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='TAction',
            fields=[
                ('id_act', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('ech_act', models.IntegerField(blank=True, null=True, verbose_name='Échéancier')),
                ('int_act', models.CharField(blank=True, max_length=255, null=True, verbose_name='Intitulé')),
                ('mont_ht_act', models.FloatField(blank=True, null=True, verbose_name='Montant HT')),
                ('mont_ttc_act', models.FloatField(blank=True, null=True, verbose_name='Montant TTC')),
                ('num_act', models.CharField(max_length=1, verbose_name='Numéro')),
            ],
            options={
                'verbose_name_plural': 'T_ACTION',
                'verbose_name': 'T_ACTION',
                'ordering': ['id_ss_axe__id_axe__id_progr__int_progr', 'id_ss_axe__id_axe__num_axe', 'id_ss_axe__num_ss_axe', 'num_act'],
                'db_table': 't_action',
            },
        ),
        migrations.CreateModel(
            name='TArretesDossier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chem_pj_arr', models.FileField(blank=True, null=True, upload_to=app.models.TArretesDossier.set_chem_pj_arr_upload_to, validators=[app.validators.val_fich_pdf], verbose_name='Insérer le fichier scanné de l\'arrêté <span class="field-complement">(fichier PDF)</span>')),
                ('comm_arr', models.TextField(blank=True, null=True, validators=[app.validators.val_cdc], verbose_name='Commentaire')),
                ('dt_lim_encl_trav_arr', models.DateField(blank=True, null=True, verbose_name="Date limite d'enclenchement des travaux")),
                ('dt_sign_arr', models.DateField(blank=True, null=True, verbose_name="Date de signature de l'arrêté")),
                ('num_arr', models.CharField(blank=True, max_length=255, null=True, validators=[app.validators.val_cdc], verbose_name="Numéro de l'arrêté")),
            ],
            options={
                'verbose_name_plural': 'T_ARRETES_DOSSIER',
                'db_table': 't_arretes_dossier',
                'verbose_name': 'T_ARRETES_DOSSIER',
            },
        ),
        migrations.CreateModel(
            name='TAvancement',
            fields=[
                ('id_av', models.AutoField(primary_key=True, serialize=False)),
                ('int_av', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_AVANCEMENT',
                'ordering': ['int_av'],
                'db_table': 't_avancement',
                'verbose_name': 'T_AVANCEMENT',
            },
        ),
        migrations.CreateModel(
            name='TAvenant',
            fields=[
                ('id_aven', models.AutoField(primary_key=True, serialize=False)),
                ('comm_aven', models.TextField(blank=True, null=True, validators=[app.validators.val_cdc], verbose_name='Commentaire')),
                ('dt_aven', models.DateField(verbose_name="Date de fin de l'avenant")),
                ('int_aven', models.CharField(max_length=255, validators=[app.validators.val_cdc], verbose_name="Intitulé de l'avenant")),
                ('mont_aven', models.FloatField(validators=[app.validators.val_mont_nul], verbose_name="Montant [ht_ou_ttc] de l'avenant (en €)")),
            ],
            options={
                'verbose_name_plural': 'T_AVENANT',
                'db_table': 't_avenant',
                'verbose_name': 'T_AVENANT',
            },
        ),
        migrations.CreateModel(
            name='TAvisCp',
            fields=[
                ('id_av_cp', models.AutoField(primary_key=True, serialize=False)),
                ('int_av_cp', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_AVIS_CP',
                'ordering': ['int_av_cp'],
                'db_table': 't_avis_cp',
                'verbose_name': 'T_AVIS_CP',
            },
        ),
        migrations.CreateModel(
            name='TAxe',
            fields=[
                ('id_axe', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('int_axe', models.CharField(max_length=255, verbose_name='Intitulé')),
                ('num_axe', models.IntegerField(verbose_name='Numéro')),
            ],
            options={
                'verbose_name_plural': 'T_AXE',
                'verbose_name': 'T_AXE',
                'ordering': ['id_progr__int_progr', 'num_axe'],
                'db_table': 't_axe',
            },
        ),
        migrations.CreateModel(
            name='TCommune',
            fields=[
                ('num_comm', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('n_comm', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'T_COMMUNE',
                'ordering': ['n_comm', 'num_comm'],
                'db_table': 't_commune',
                'verbose_name': 'T_COMMUNE',
            },
        ),
        migrations.CreateModel(
            name='TCommunesCp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'T_COMMUNES_CP',
                'db_table': 't_communes_cp',
                'verbose_name': 'T_COMMUNES_CP',
            },
        ),
        migrations.CreateModel(
            name='TCp',
            fields=[
                ('cp_comm', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('code_comm', models.ManyToManyField(through='app.TCommunesCp', to='app.TCommune')),
            ],
            options={
                'verbose_name_plural': 'T_CP',
                'ordering': ['cp_comm'],
                'db_table': 't_cp',
                'verbose_name': 'T_CP',
            },
        ),
        migrations.CreateModel(
            name='TDemandeVersement',
            fields=[
                ('id_ddv', models.AutoField(primary_key=True, serialize=False)),
                ('chem_pj_ddv', models.FileField(blank=True, null=True, upload_to=app.models.TDemandeVersement.set_chem_pj_ddv_upload_to, validators=[app.validators.val_fich_pdf], verbose_name='\n        Insérer le courrier scanné de la demande de versement <span class="field-complement">(fichier PDF)</span>\n        ')),
                ('comm_ddv', models.TextField(blank=True, null=True, validators=[app.validators.val_cdc], verbose_name='Commentaire')),
                ('dt_ddv', models.DateField(verbose_name='Date de la demande de versement')),
                ('dt_vers_ddv', models.DateField(blank=True, null=True, verbose_name='Date de versement')),
                ('int_ddv', models.CharField(max_length=255, validators=[app.validators.val_cdc], verbose_name='Intitulé de la demande de versement')),
                ('mont_ht_ddv', models.FloatField(validators=[app.validators.val_mont_pos], verbose_name='Montant HT de la demande de versement (en €)')),
                ('mont_ht_verse_ddv', models.FloatField(default=0, validators=[app.validators.val_mont_nul], verbose_name='Montant HT versé (en €)')),
                ('mont_ttc_ddv', models.FloatField(validators=[app.validators.val_mont_pos], verbose_name='Montant TTC de la demande de versement (en €)')),
                ('mont_ttc_verse_ddv', models.FloatField(default=0, validators=[app.validators.val_mont_nul], verbose_name='Montant TTC versé (en €)')),
            ],
            options={
                'verbose_name_plural': 'T_DEMANDE_VERSEMENT',
                'db_table': 't_demande_versement',
                'verbose_name': 'T_DEMANDE_VERSEMENT',
            },
        ),
        migrations.CreateModel(
            name='TDepartement',
            fields=[
                ('num_dep', models.CharField(max_length=3, primary_key=True, serialize=False, verbose_name='Numéro')),
                ('n_dep', models.CharField(max_length=255, verbose_name='Nom')),
            ],
            options={
                'verbose_name_plural': 'T_DEPARTEMENT',
                'ordering': ['num_dep'],
                'db_table': 't_departement',
                'verbose_name': 'T_DEPARTEMENT',
            },
        ),
        migrations.CreateModel(
            name='TDossier',
            fields=[
                ('id_doss', models.AutoField(primary_key=True, serialize=False)),
                ('chem_pj_doss', models.FileField(blank=True, null=True, upload_to=app.models.TDossier.set_chem_pj_doss_upload_to, validators=[app.validators.val_fich_pdf], verbose_name='Insérer le fichier scanné du mémoire technique')),
                ('comm_doss', models.TextField(blank=True, null=True, validators=[app.validators.val_cdc], verbose_name='Commentaire')),
                ('comm_regl_doss', models.TextField(blank=True, null=True, validators=[app.validators.val_cdc], verbose_name='Commentaire')),
                ('dt_av_cp_doss', models.DateField(blank=True, null=True, verbose_name="Date de l'avis du comité de programmation")),
                ('dt_delib_moa_doss', models.DateField(blank=True, null=True, verbose_name="Date de délibération au maître d'ouvrage")),
                ('dt_int_doss', models.DateField(default=datetime.date(2017, 1, 17))),
                ('est_ttc_doss', models.BooleanField()),
                ('ld_doss', models.CharField(max_length=255, validators=[app.validators.val_cdc], verbose_name='Lieu-dit précis')),
                ('mont_doss', models.FloatField(validators=[app.validators.val_mont_pos], verbose_name='Montant (en €)')),
                ('num_act', models.CharField(blank=True, max_length=1, null=True)),
                ('num_axe', models.IntegerField(blank=True, null=True)),
                ('num_doss', models.CharField(max_length=255, unique=True)),
                ('num_ss_axe', models.IntegerField(blank=True, null=True)),
                ('terr_doss', models.CharField(max_length=255, validators=[app.validators.val_cdc], verbose_name='Territoire')),
            ],
            options={
                'verbose_name_plural': 'T_DOSSIER',
                'ordering': ['num_doss'],
                'db_table': 't_dossier',
                'verbose_name': 'T_DOSSIER',
            },
        ),
        migrations.CreateModel(
            name='TDossierGeom',
            fields=[
                ('gid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('geom_lin', django.contrib.gis.db.models.fields.LineStringField(blank=True, null=True, srid=2154)),
                ('geom_pct', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=2154)),
                ('geom_pol', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=2154)),
            ],
            options={
                'verbose_name_plural': 'T_DOSSIER_GEOM',
                'db_table': 't_dossier_geom',
                'verbose_name': 'T_DOSSIER_GEOM',
            },
        ),
        migrations.CreateModel(
            name='TDroit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('en_ecr', models.BooleanField(verbose_name='Écriture')),
                ('en_lect', models.BooleanField(verbose_name='Lecture')),
            ],
            options={
                'verbose_name_plural': 'T_DROIT',
                'verbose_name': 'T_DROIT',
                'db_table': 't_droit',
            },
        ),
        migrations.CreateModel(
            name='TFacture',
            fields=[
                ('id_fact', models.AutoField(primary_key=True, serialize=False)),
                ('chem_pj_fact', models.FileField(blank=True, null=True, upload_to=app.models.TFacture.set_chem_pj_fact_upload_to, validators=[app.validators.val_fich_pdf], verbose_name='Insérer le fichier scanné de la facture <span class="field-complement">(fichier PDF)</span>')),
                ('comm_fact', models.TextField(blank=True, null=True, validators=[app.validators.val_cdc], verbose_name='Commentaire')),
                ('dt_mand_moa_fact', models.DateField(verbose_name="Date de mandatement par le maître d'ouvrage")),
                ('dt_rec_fact', models.DateField(verbose_name='Date de réception de la facture')),
                ('mont_ht_fact', models.FloatField(validators=[app.validators.val_mont_pos], verbose_name='Montant HT de la facture (en €)')),
                ('mont_ttc_fact', models.FloatField(validators=[app.validators.val_mont_pos], verbose_name='Montant TTC de la facture (en €)')),
                ('num_bord_fact', models.CharField(max_length=255, validators=[app.validators.val_cdc], verbose_name='Numéro de bordereau')),
                ('num_fact', models.CharField(max_length=255, validators=[app.validators.val_cdc], verbose_name='Numéro de facture')),
                ('num_mandat_fact', models.CharField(max_length=255, validators=[app.validators.val_cdc], verbose_name='Numéro de mandat')),
                ('suivi_fact', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'T_FACTURE',
                'db_table': 't_facture',
                'verbose_name': 'T_FACTURE',
            },
        ),
        migrations.CreateModel(
            name='TFacturesDemandeVersement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_ddv', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TDemandeVersement')),
                ('id_fact', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TFacture')),
            ],
            options={
                'verbose_name_plural': 'T_FACTURES_DEMANDE_VERSEMENT',
                'db_table': 't_factures_demande_versement',
                'verbose_name': 'T_FACTURES_DEMANDE_VERSEMENT',
            },
        ),
        migrations.CreateModel(
            name='TFamille',
            fields=[
                ('id_fam', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': 'T_FAMILLE',
                'db_table': 't_famille',
                'verbose_name': 'T_FAMILLE',
            },
        ),
        migrations.CreateModel(
            name='TFinancement',
            fields=[
                ('id_fin', models.AutoField(primary_key=True, serialize=False)),
                ('chem_pj_fin', models.FileField(blank=True, null=True, upload_to=app.models.TFinancement.set_chem_pj_fin_upload_to, validators=[app.validators.val_fich_pdf], verbose_name='Insérer l\'arrêté de subvention <span class="field-complement">(fichier PDF)</span>')),
                ('comm_fin', models.TextField(blank=True, null=True, validators=[app.validators.val_cdc], verbose_name='Commentaire')),
                ('dt_deb_elig_fin', models.DateField(blank=True, null=True, verbose_name="Date de début d'éligibilité")),
                ('dt_lim_deb_oper_fin', models.DateField(blank=True, null=True, verbose_name="Date limite du début de l'opération")),
                ('dt_lim_prem_ac_fin', models.DateField(blank=True, null=True, verbose_name='Date limite du premier acompte')),
                ('duree_pror_fin', models.IntegerField(default=0, verbose_name='Durée de la prorogation (en mois)')),
                ('duree_valid_fin', models.IntegerField(default=0, verbose_name="Durée de validité de l'aide (en mois)")),
                ('mont_elig_fin', models.FloatField(blank=True, null=True, validators=[app.validators.val_mont_pos], verbose_name="Montant [ht_ou_ttc] de l'assiette éligible de la subvention (en €)")),
                ('mont_part_fin', models.FloatField(validators=[app.validators.val_mont_pos], verbose_name='Montant [ht_ou_ttc] total de la participation (en €)')),
                ('num_arr_fin', models.CharField(blank=True, max_length=255, null=True, validators=[app.validators.val_cdc], verbose_name="Numéro de l'arrêté ou convention")),
                ('pourc_elig_fin', models.FloatField(blank=True, null=True, validators=[app.validators.val_pourc], verbose_name="Pourcentage de l'assiette éligible")),
                ('pourc_real_fin', models.FloatField(blank=True, null=True, validators=[app.validators.val_pourc], verbose_name='Pourcentage de réalisation des travaux')),
            ],
            options={
                'verbose_name_plural': 'T_FINANCEMENT',
                'db_table': 't_financement',
                'verbose_name': 'T_FINANCEMENT',
            },
        ),
        migrations.CreateModel(
            name='TInstanceConcertation',
            fields=[
                ('id_inst_conc', models.AutoField(primary_key=True, serialize=False)),
                ('int_inst_conc', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_INSTANCE_CONCERTATION',
                'ordering': ['int_inst_conc'],
                'db_table': 't_instance_concertation',
                'verbose_name': 'T_INSTANCE_CONCERTATION',
            },
        ),
        migrations.CreateModel(
            name='TNatureDossier',
            fields=[
                ('id_nat_doss', models.AutoField(primary_key=True, serialize=False)),
                ('int_nat_doss', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_NATURE_DOSSIER',
                'ordering': ['int_nat_doss'],
                'db_table': 't_nature_dossier',
                'verbose_name': 'T_NATURE_DOSSIER',
            },
        ),
        migrations.CreateModel(
            name='TNaturePrestation',
            fields=[
                ('id_nat_prest', models.AutoField(primary_key=True, serialize=False)),
                ('int_nat_prest', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_NATURE_PRESTATION',
                'ordering': ['int_nat_prest'],
                'db_table': 't_nature_prestation',
                'verbose_name': 'T_NATURE_PRESTATION',
            },
        ),
        migrations.CreateModel(
            name='TOrganisme',
            fields=[
                ('id_org', models.AutoField(primary_key=True, serialize=False)),
                ('adr_org', models.CharField(blank=True, max_length=255, null=True, verbose_name='Adresse (ligne 1)')),
                ('bp_org', models.CharField(blank=True, max_length=255, null=True, verbose_name='Boîte postale')),
                ('cedex_org', models.CharField(blank=True, max_length=255, null=True, verbose_name='Cedex')),
                ('comm_org', models.TextField(blank=True, null=True, verbose_name='Commentaire')),
                ('compl_adr_org', models.CharField(blank=True, max_length=255, null=True, verbose_name='Adresse (ligne 2)')),
                ('cont_org', models.CharField(blank=True, max_length=255, null=True)),
                ('courr_org', models.CharField(blank=True, max_length=255, null=True, verbose_name='Adresse électronique')),
                ('cp_org', models.CharField(blank=True, max_length=5, null=True, verbose_name='Code postal')),
                ('n_org', models.CharField(max_length=255, verbose_name='Nom')),
                ('port_org', models.CharField(blank=True, max_length=10, null=True, verbose_name='Numéro de téléphone portable')),
                ('site_web_org', models.CharField(blank=True, max_length=255, null=True, verbose_name='Site web')),
                ('tel_org', models.CharField(blank=True, max_length=10, null=True, verbose_name='Numéro de téléphone')),
            ],
            options={
                'verbose_name_plural': 'T_ORGANISME',
                'ordering': ['n_org'],
                'db_table': 't_organisme',
                'verbose_name': 'T_ORGANISME',
            },
        ),
        migrations.CreateModel(
            name='TPaiementPremierAcompte',
            fields=[
                ('id_paiem_prem_ac', models.AutoField(primary_key=True, serialize=False)),
                ('int_paiem_prem_ac', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_PAIEMENT_PREMIER_ACOMPTE',
                'ordering': ['int_paiem_prem_ac'],
                'db_table': 't_paiement_premier_acompte',
                'verbose_name': 'T_PAIEMENT_PREMIER_ACOMPTE',
            },
        ),
        migrations.CreateModel(
            name='TPeriodePriseVuePhoto',
            fields=[
                ('id_ppv_ph', models.AutoField(primary_key=True, serialize=False)),
                ('int_ppv_ph', models.CharField(max_length=255, verbose_name='Intitulé')),
                ('ordre_ppv_ph', models.IntegerField(blank=True, null=True, verbose_name='Ordre dans la liste déroulante')),
            ],
            options={
                'verbose_name_plural': 'T_PERIODE_PRISE_VUE_PHOTO',
                'ordering': ['ordre_ppv_ph'],
                'db_table': 't_periode_prise_vue_photo',
                'verbose_name': 'T_PERIODE_PRISE_VUE_PHOTO',
            },
        ),
        migrations.CreateModel(
            name='TPhoto',
            fields=[
                ('id_ph', models.AutoField(primary_key=True, serialize=False)),
                ('chem_ph', models.FileField(upload_to=app.models.TPhoto.set_chem_ph_upload_to, validators=[app.validators.val_fich_img], verbose_name='Insérer une photo <span class="field-complement">(taille limitée à 3 Mo)</span>')),
                ('descr_ph', models.CharField(blank=True, max_length=255, null=True, validators=[app.validators.val_cdc], verbose_name='Description')),
                ('dt_pv_ph', models.DateField(verbose_name='Date de prise de vue')),
                ('int_ph', models.CharField(max_length=255, validators=[app.validators.val_cdc], verbose_name='Intitulé de la photo')),
            ],
            options={
                'verbose_name_plural': 'T_PHOTO',
                'db_table': 't_photo',
                'verbose_name': 'T_PHOTO',
            },
        ),
        migrations.CreateModel(
            name='TPrestation',
            fields=[
                ('id_prest', models.AutoField(primary_key=True, serialize=False)),
                ('chem_pj_prest', models.FileField(blank=True, null=True, upload_to=app.models.TPrestation.set_chem_pj_prest_upload_to, validators=[app.validators.val_fich_pdf], verbose_name='Insérer le contrat de prestation <span class="field-complement">(fichier PDF)</span>')),
                ('comm_prest', models.TextField(blank=True, null=True, validators=[app.validators.val_cdc], verbose_name='Commentaire')),
                ('dt_fin_prest', models.DateField(verbose_name='Date de fin de la prestation')),
                ('dt_notif_prest', models.DateField(verbose_name='Date de notification de la prestation')),
                ('int_prest', models.CharField(max_length=255, validators=[app.validators.val_cdc], verbose_name='Intitulé de la prestation')),
                ('mont_prest', models.FloatField(validators=[app.validators.val_mont_pos], verbose_name='Montant [ht_ou_ttc] total de la prestation')),
                ('ref_prest', models.CharField(max_length=255, validators=[app.validators.val_cdc], verbose_name='Référence de la prestation')),
            ],
            options={
                'verbose_name_plural': 'T_PRESTATION',
                'db_table': 't_prestation',
                'verbose_name': 'T_PRESTATION',
            },
        ),
        migrations.CreateModel(
            name='TPrestationsDossier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mont_prest_doss', models.FloatField(validators=[app.validators.val_mont_pos])),
                ('seq_ac_prest_doss', models.IntegerField(default=1)),
            ],
            options={
                'verbose_name_plural': 'T_PRESTATIONS_DOSSIER',
                'db_table': 't_prestations_dossier',
                'verbose_name': 'T_PRESTATIONS_DOSSIER',
            },
        ),
        migrations.CreateModel(
            name='TProgramme',
            fields=[
                ('id_progr', models.AutoField(primary_key=True, serialize=False)),
                ('dim_progr', models.CharField(max_length=255, unique=True, verbose_name='Diminutif')),
                ('en_act_progr', models.BooleanField(default=True, verbose_name='En activité')),
                ('int_progr', models.CharField(max_length=255, verbose_name='Intitulé')),
                ('seq_progr', models.IntegerField(default=1, verbose_name='Séquentiel')),
            ],
            options={
                'verbose_name_plural': 'T_PROGRAMME',
                'ordering': ['int_progr'],
                'db_table': 't_programme',
                'verbose_name': 'T_PROGRAMME',
            },
        ),
        migrations.CreateModel(
            name='TRegroupementsMoa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'T_REGROUPEMENTS_MOA',
                'db_table': 't_regroupements_moa',
                'verbose_name': 'T_REGROUPEMENTS_MOA',
            },
        ),
        migrations.CreateModel(
            name='TRiviere',
            fields=[
                ('id_riv', models.AutoField(primary_key=True, serialize=False)),
                ('n_riv', models.CharField(max_length=255, verbose_name='Nom')),
            ],
            options={
                'verbose_name_plural': 'T_RIVIERE',
                'ordering': ['n_riv'],
                'db_table': 't_riviere',
                'verbose_name': 'T_RIVIERE',
            },
        ),
        migrations.CreateModel(
            name='TRivieresDossier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_riv', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TRiviere')),
            ],
            options={
                'verbose_name_plural': 'T_RIVIERES_DOSSIER',
                'db_table': 't_rivieres_dossier',
                'verbose_name': 'T_RIVIERES_DOSSIER',
            },
        ),
        migrations.CreateModel(
            name='TSage',
            fields=[
                ('id_sage', models.AutoField(primary_key=True, serialize=False)),
                ('n_sage', models.CharField(max_length=255, verbose_name='Nom')),
            ],
            options={
                'verbose_name_plural': 'T_SAGE',
                'ordering': ['n_sage'],
                'db_table': 't_sage',
                'verbose_name': 'T_SAGE',
            },
        ),
        migrations.CreateModel(
            name='TSousAxe',
            fields=[
                ('id_ss_axe', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('ech_ss_axe', models.IntegerField(blank=True, null=True, verbose_name='Échéancier')),
                ('int_ss_axe', models.CharField(max_length=255, verbose_name='Intitulé')),
                ('mont_ht_ss_axe', models.FloatField(blank=True, null=True, verbose_name='Montant HT')),
                ('mont_ttc_ss_axe', models.FloatField(blank=True, null=True, verbose_name='Montant TTC')),
                ('num_ss_axe', models.IntegerField(verbose_name='Numéro')),
                ('id_axe', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TAxe', verbose_name='Axe')),
            ],
            options={
                'verbose_name_plural': 'T_SOUS_AXE',
                'verbose_name': 'T_SOUS_AXE',
                'ordering': ['id_axe__id_progr__int_progr', 'id_axe__num_axe', 'num_ss_axe'],
                'db_table': 't_sous_axe',
            },
        ),
        migrations.CreateModel(
            name='TTechnicien',
            fields=[
                ('id_techn', models.AutoField(primary_key=True, serialize=False)),
                ('en_act_techn', models.BooleanField(default=True, verbose_name='En activité')),
                ('n_techn', models.CharField(max_length=255, verbose_name='Nom de famille')),
                ('pren_techn', models.CharField(max_length=255, verbose_name='Prénom')),
            ],
            options={
                'verbose_name_plural': 'T_TECHNICIEN',
                'ordering': ['n_techn', 'pren_techn'],
                'db_table': 't_technicien',
                'verbose_name': 'T_TECHNICIEN',
            },
        ),
        migrations.CreateModel(
            name='TTypeAvancementArrete',
            fields=[
                ('id_type_av_arr', models.AutoField(primary_key=True, serialize=False)),
                ('int_type_av_arr', models.CharField(max_length=255, verbose_name='Intitulé')),
                ('ordre_type_av_arr', models.IntegerField(blank=True, null=True, verbose_name='Ordre dans la liste déroulante')),
            ],
            options={
                'verbose_name_plural': 'T_TYPE_AVANCEMENT_ARRETE',
                'ordering': ['ordre_type_av_arr'],
                'db_table': 't_type_avancement_arrete',
                'verbose_name': 'T_TYPE_AVANCEMENT_ARRETE',
            },
        ),
        migrations.CreateModel(
            name='TTypeDeclaration',
            fields=[
                ('id_type_decl', models.AutoField(primary_key=True, serialize=False)),
                ('int_type_decl', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_TYPE_DECLARATION',
                'ordering': ['int_type_decl'],
                'db_table': 't_type_declaration',
                'verbose_name': 'T_TYPE_DECLARATION',
            },
        ),
        migrations.CreateModel(
            name='TTypeDossier',
            fields=[
                ('id_type_doss', models.AutoField(primary_key=True, serialize=False)),
                ('int_type_doss', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_TYPE_DOSSIER',
                'ordering': ['int_type_doss'],
                'db_table': 't_type_dossier',
                'verbose_name': 'T_TYPE_DOSSIER',
            },
        ),
        migrations.CreateModel(
            name='TTypeGeom',
            fields=[
                ('id_type_geom', models.AutoField(primary_key=True, serialize=False)),
                ('int_type_geom', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_TYPE_GEOM',
                'ordering': ['int_type_geom'],
                'db_table': 't_type_geom',
                'verbose_name': 'T_TYPE_GEOM',
            },
        ),
        migrations.CreateModel(
            name='TTypeProgramme',
            fields=[
                ('id_type_progr', models.AutoField(primary_key=True, serialize=False)),
                ('int_type_progr', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_TYPE_PROGRAMME',
                'ordering': ['int_type_progr'],
                'db_table': 't_type_programme',
                'verbose_name': 'T_TYPE_PROGRAMME',
            },
        ),
        migrations.CreateModel(
            name='TTypesGeomTypeDossier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_type_doss', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTypeDossier')),
                ('id_type_geom', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTypeGeom', verbose_name='Type de géométrie')),
            ],
            options={
                'verbose_name_plural': 'T_TYPES_GEOM_TYPE_DOSSIER',
                'db_table': 't_types_geom_type_dossier',
                'verbose_name': 'T_TYPES_GEOM_TYPE_DOSSIER',
            },
        ),
        migrations.CreateModel(
            name='TTypesProgrammesTypeDossier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_type_doss', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTypeDossier')),
                ('id_type_progr', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTypeProgramme', verbose_name='Type de programme')),
            ],
            options={
                'verbose_name_plural': 'T_TYPES_PROGRAMMES_TYPE_DOSSIER',
                'db_table': 't_types_programmes_type_dossier',
                'verbose_name': 'T_TYPES_PROGRAMMES_TYPE_DOSSIER',
            },
        ),
        migrations.CreateModel(
            name='TTypeVersement',
            fields=[
                ('id_type_vers', models.AutoField(primary_key=True, serialize=False)),
                ('int_type_vers', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_TYPE_VERSEMENT',
                'ordering': ['int_type_vers'],
                'db_table': 't_type_versement',
                'verbose_name': 'T_TYPE_VERSEMENT',
            },
        ),
        migrations.CreateModel(
            name='TUnite',
            fields=[
                ('id_unit', models.AutoField(primary_key=True, serialize=False)),
                ('int_unit', models.CharField(max_length=255, verbose_name='Intitulé')),
            ],
            options={
                'verbose_name_plural': 'T_UNITE',
                'ordering': ['int_unit'],
                'db_table': 't_unite',
                'verbose_name': 'T_UNITE',
            },
        ),
        migrations.CreateModel(
            name='TUtilisateur',
            fields=[
                ('id_util', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('port_util', models.CharField(blank=True, max_length=10, null=True, validators=[app.validators.val_tel], verbose_name='Numéro de téléphone portable')),
                ('tel_util', models.CharField(blank=True, max_length=10, null=True, validators=[app.validators.val_tel], verbose_name='Numéro de téléphone')),
            ],
            options={
                'verbose_name_plural': 'T_UTILISATEUR',
                'ordering': ['username'],
                'db_table': 't_utilisateur',
                'verbose_name': 'T_UTILISATEUR',
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TFinanceur',
            fields=[
                ('id_org_fin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.TOrganisme')),
            ],
            options={
                'verbose_name_plural': 'T_FINANCEUR',
                'db_table': 't_financeur',
                'verbose_name': 'T_FINANCEUR',
            },
            bases=('app.torganisme',),
        ),
        migrations.CreateModel(
            name='TMoa',
            fields=[
                ('id_org_moa', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.TOrganisme')),
                ('dim_org_moa', models.CharField(max_length=255, unique=True, verbose_name='Diminutif')),
                ('en_act_org_moa', models.BooleanField(default=True, verbose_name='En activité')),
                ('logo_org_moa', models.FileField(blank=True, null=True, upload_to=app.models.TMoa.set_logo_org_moa_upload_to, validators=[app.validators.val_fich_img], verbose_name='Logo')),
            ],
            options={
                'verbose_name_plural': 'T_MOA',
                'db_table': 't_moa',
                'verbose_name': 'T_MOA',
            },
            bases=('app.torganisme',),
        ),
        migrations.CreateModel(
            name='TPgre',
            fields=[
                ('id_pgre', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.TDossier')),
                ('quant_objs_pgre', models.FloatField(blank=True, null=True)),
                ('quant_real_pgre', models.FloatField(blank=True, null=True)),
                ('id_inst_conc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.TInstanceConcertation')),
                ('id_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.TUnite')),
            ],
            options={
                'verbose_name_plural': 'T_PGRE',
                'db_table': 't_pgre',
                'verbose_name': 'T_PGRE',
            },
            bases=('app.tdossier',),
        ),
        migrations.CreateModel(
            name='TPrestataire',
            fields=[
                ('id_org_prest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.TOrganisme')),
                ('siret_org_prest', models.CharField(max_length=14, unique=True, validators=[app.validators.val_siret], verbose_name='Numéro SIRET')),
                ('num_dep', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TDepartement', verbose_name='Département')),
            ],
            options={
                'verbose_name_plural': 'T_PRESTATAIRE',
                'db_table': 't_prestataire',
                'verbose_name': 'T_PRESTATAIRE',
            },
            bases=('app.torganisme',),
        ),
        migrations.AddField(
            model_name='tutilisateur',
            name='id_org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TOrganisme', verbose_name='Organisme'),
        ),
        migrations.AddField(
            model_name='ttypedossier',
            name='type_geom',
            field=models.ManyToManyField(through='app.TTypesGeomTypeDossier', to='app.TTypeGeom'),
        ),
        migrations.AddField(
            model_name='ttypedossier',
            name='type_progr',
            field=models.ManyToManyField(through='app.TTypesProgrammesTypeDossier', to='app.TTypeProgramme'),
        ),
        migrations.AddField(
            model_name='tprogramme',
            name='id_type_progr',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTypeProgramme', verbose_name='Type de programme'),
        ),
        migrations.AddField(
            model_name='tprestationsdossier',
            name='id_doss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TDossier'),
        ),
        migrations.AddField(
            model_name='tprestationsdossier',
            name='id_prest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TPrestation'),
        ),
        migrations.AddField(
            model_name='tprestation',
            name='doss',
            field=models.ManyToManyField(through='app.TPrestationsDossier', to='app.TDossier'),
        ),
        migrations.AddField(
            model_name='tprestation',
            name='id_nat_prest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TNaturePrestation', verbose_name='Nature de la prestation'),
        ),
        migrations.AddField(
            model_name='tphoto',
            name='id_doss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TDossier'),
        ),
        migrations.AddField(
            model_name='tphoto',
            name='id_ppv_ph',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TPeriodePriseVuePhoto', verbose_name='Période de prise de vue'),
        ),
        migrations.AddField(
            model_name='torganisme',
            name='num_comm',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.TCommune', verbose_name='Commune'),
        ),
        migrations.AddField(
            model_name='tfinancement',
            name='id_doss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TDossier'),
        ),
        migrations.AddField(
            model_name='tfinancement',
            name='id_paiem_prem_ac',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.TPaiementPremierAcompte', verbose_name='Premier acompte payé en fonction de'),
        ),
        migrations.AddField(
            model_name='tfacture',
            name='id_doss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TDossier'),
        ),
        migrations.AddField(
            model_name='tfacture',
            name='id_prest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TPrestation'),
        ),
        migrations.AddField(
            model_name='tdroit',
            name='id_type_progr',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTypeProgramme', verbose_name='Type de programme'),
        ),
        migrations.AddField(
            model_name='tdroit',
            name='id_util',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TUtilisateur', verbose_name='Utilisateur'),
        ),
        migrations.AddField(
            model_name='tdossiergeom',
            name='id_doss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.TDossier'),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='id_av',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TAvancement', verbose_name="État d'avancement"),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='id_av_cp',
            field=models.ForeignKey(default=app.models.TDossier.set_id_av_cp_default, on_delete=django.db.models.deletion.DO_NOTHING, to='app.TAvisCp', verbose_name='Avis du comité de programmation'),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='id_doss_ass',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.TDossier'),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='id_fam',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TFamille'),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='id_nat_doss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TNatureDossier', verbose_name='Nature du dossier'),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='id_progr',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TProgramme', verbose_name='Programme'),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='id_sage',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.TSage', verbose_name='SAGE'),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='id_techn',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTechnicien', verbose_name='Technicien'),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='id_type_doss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTypeDossier'),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='type_decl',
            field=models.ManyToManyField(through='app.TArretesDossier', to='app.TTypeDeclaration'),
        ),
        migrations.AddField(
            model_name='tdemandeversement',
            name='fact',
            field=models.ManyToManyField(through='app.TFacturesDemandeVersement', to='app.TFacture'),
        ),
        migrations.AddField(
            model_name='tdemandeversement',
            name='id_fin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TFinancement'),
        ),
        migrations.AddField(
            model_name='tdemandeversement',
            name='id_type_vers',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTypeVersement', verbose_name='Type de demande de versement'),
        ),
        migrations.AddField(
            model_name='tcommunescp',
            name='cp_comm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TCp'),
        ),
        migrations.AddField(
            model_name='tcommunescp',
            name='num_comm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TCommune'),
        ),
        migrations.AddField(
            model_name='taxe',
            name='id_progr',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TProgramme', verbose_name='Programme'),
        ),
        migrations.AddField(
            model_name='tavenant',
            name='id_doss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TDossier'),
        ),
        migrations.AddField(
            model_name='tavenant',
            name='id_prest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TPrestation'),
        ),
        migrations.AddField(
            model_name='tarretesdossier',
            name='id_doss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TDossier'),
        ),
        migrations.AddField(
            model_name='tarretesdossier',
            name='id_type_av_arr',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTypeAvancementArrete', verbose_name='Avancement'),
        ),
        migrations.AddField(
            model_name='tarretesdossier',
            name='id_type_decl',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TTypeDeclaration'),
        ),
        migrations.AddField(
            model_name='taction',
            name='id_ss_axe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TSousAxe', verbose_name='Sous-axe'),
        ),
        migrations.AddField(
            model_name='tutilisateur',
            name='moa',
            field=models.ManyToManyField(related_name='_tutilisateur_moa_+', through='app.TDroit', to='app.TMoa'),
        ),
        migrations.AlterUniqueTogether(
            name='tsousaxe',
            unique_together=set([('num_ss_axe', 'id_axe')]),
        ),
        migrations.AddField(
            model_name='trivieresdossier',
            name='id_pgre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TPgre'),
        ),
        migrations.AddField(
            model_name='tregroupementsmoa',
            name='id_org_moa_anc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='id_org_moa_anc', to='app.TMoa', verbose_name="Maître d'ouvrage ancien"),
        ),
        migrations.AddField(
            model_name='tregroupementsmoa',
            name='id_org_moa_fil',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='id_org_moa_fil', to='app.TMoa'),
        ),
        migrations.AddField(
            model_name='tprestation',
            name='id_org_prest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TPrestataire'),
        ),
        migrations.AddField(
            model_name='tpgre',
            name='riv',
            field=models.ManyToManyField(through='app.TRivieresDossier', to='app.TRiviere'),
        ),
        migrations.AddField(
            model_name='tmoa',
            name='moa',
            field=models.ManyToManyField(related_name='_tmoa_moa_+', through='app.TRegroupementsMoa', to='app.TMoa'),
        ),
        migrations.AddField(
            model_name='tfinancement',
            name='id_org_fin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TFinanceur', verbose_name='Organisme financeur'),
        ),
        migrations.AddField(
            model_name='tdroit',
            name='id_org_moa',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.TMoa', verbose_name="Maître d'ouvrage"),
        ),
        migrations.AddField(
            model_name='tdossier',
            name='id_org_moa',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.TMoa'),
        ),
        migrations.AlterUniqueTogether(
            name='taxe',
            unique_together=set([('num_axe', 'id_progr')]),
        ),
        migrations.AlterUniqueTogether(
            name='taction',
            unique_together=set([('num_act', 'id_ss_axe')]),
        ),
        migrations.AlterUniqueTogether(
            name='tdroit',
            unique_together=set([('id_org_moa', 'id_type_progr', 'id_util')]),
        ),
    ]
